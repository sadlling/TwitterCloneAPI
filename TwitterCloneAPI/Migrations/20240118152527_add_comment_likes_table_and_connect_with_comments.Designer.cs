// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterCloneAPI.Models;

#nullable disable

namespace TwitterCloneAPI.Migrations
{
    [DbContext(typeof(TwitterCloneContext))]
    [Migration("20240118152527_add_comment_likes_table_and_connect_with_comments")]
    partial class add_comment_likes_table_and_connect_with_comments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TwitterCloneAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("commentImage");

                    b.Property<string>("Content")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("CommentId")
                        .HasName("PK_Comment_commentId");

                    b.HasIndex("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.CommentLike", b =>
                {
                    b.Property<int>("CommentLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentLikeId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLike");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Follower", b =>
                {
                    b.Property<int>("FollowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("followerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowerId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int>("FollowerUserId")
                        .HasColumnType("int")
                        .HasColumnName("followerUserId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("FollowerId")
                        .HasName("PK_Follower_folowerId");

                    b.HasIndex("FollowerUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Follower", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Hashtag", b =>
                {
                    b.Property<int>("HashtagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hashtagId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HashtagId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("HashtagId")
                        .HasName("PK_Hashtag_hashtagId");

                    b.ToTable("Hashtag", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("LikeId")
                        .HasName("PK_Like_likeId");

                    b.HasIndex("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsReading")
                        .HasColumnType("bit")
                        .HasColumnName("isReading");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int")
                        .HasColumnName("notificationType");

                    b.Property<int>("SourseUserId")
                        .HasColumnType("int")
                        .HasColumnName("sourseUserId");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_notificationId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("SourseUserId");

                    b.HasIndex("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.NotificationType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("TypeId")
                        .HasName("PK_NotificationType_typeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Retweet", b =>
                {
                    b.Property<int>("RetweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("retweetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetweetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("RetweetId")
                        .HasName("PK_Retweet_retweetId");

                    b.HasIndex("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Retweet", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.SavedTweet", b =>
                {
                    b.Property<int>("SavedTweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("savedTweetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SavedTweetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("SavedTweetId")
                        .HasName("PK_SavedTweet_savedTweetId");

                    b.HasIndex("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedTweet", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Tweet", b =>
                {
                    b.Property<int>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TweetId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("isPublic");

                    b.Property<string>("TweetImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tweetImage");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("TweetId")
                        .HasName("PK_Tweet_tweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Tweet", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.TweetHashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HashtagId")
                        .HasColumnType("int")
                        .HasColumnName("hashtagId");

                    b.Property<int>("TweetId")
                        .HasColumnType("int")
                        .HasColumnName("tweetId");

                    b.HasKey("Id")
                        .HasName("PK_TweetHashtags_id");

                    b.HasIndex("HashtagId");

                    b.HasIndex("TweetId");

                    b.ToTable("TweetHashtags");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.UserAuthentication", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("refreshToken");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("tokenCreated");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime")
                        .HasColumnName("tokenExpires");

                    b.HasKey("UserId")
                        .HasName("PK_UserAuthentification_Id");

                    b.HasIndex(new[] { "Email" }, "UQ_UserAuthentification_Email")
                        .IsUnique();

                    b.ToTable("UserAuthentication", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profileId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("BackPicture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("backPicture");

                    b.Property<string>("Bio")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("ProfilePicture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("profilePicture");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("ProfileId")
                        .HasName("PK_UserProfile_Id");

                    b.HasIndex(new[] { "UserId" }, "UQ_UserProfile_UserId")
                        .IsUnique();

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Comment", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("Comments")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_UserAuthentification_userId");

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.CommentLike", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Follower", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "FollowerUser")
                        .WithMany("FollowerFollowerUsers")
                        .HasForeignKey("FollowerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_UserAuthentification_followeruserId");

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("FollowerUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_UserAuthentification_userId");

                    b.Navigation("FollowerUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Like", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("Likes")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Like_UserAuthentification_userId");

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Notification", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.NotificationType", "NotificationTypeNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationType")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_NotificationType_typeId");

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "SourseUser")
                        .WithMany("NotificationSourseUsers")
                        .HasForeignKey("SourseUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_UserAuthentification_sourseUserId");

                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("Notifications")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_UserAuthentification_userId");

                    b.Navigation("NotificationTypeNavigation");

                    b.Navigation("SourseUser");

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Retweet", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("Retweets")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("Retweets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Retweet_UserAuthentification_userId");

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.SavedTweet", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("SavedTweets")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("SavedTweets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SavedTweet_UserAuthentification_userId");

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Tweet", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tweet_UserAuthentification_userIdT");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.TweetHashtag", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.Hashtag", "Hashtag")
                        .WithMany("TweetHashtags")
                        .HasForeignKey("HashtagId")
                        .IsRequired();

                    b.HasOne("TwitterCloneAPI.Models.Tweet", "Tweet")
                        .WithMany("TweetHashtags")
                        .HasForeignKey("TweetId")
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.UserProfile", b =>
                {
                    b.HasOne("TwitterCloneAPI.Models.UserAuthentication", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("TwitterCloneAPI.Models.UserProfile", "UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Hashtag", b =>
                {
                    b.Navigation("TweetHashtags");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.Tweet", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("Retweets");

                    b.Navigation("SavedTweets");

                    b.Navigation("TweetHashtags");
                });

            modelBuilder.Entity("TwitterCloneAPI.Models.UserAuthentication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowerFollowerUsers");

                    b.Navigation("FollowerUsers");

                    b.Navigation("Likes");

                    b.Navigation("NotificationSourseUsers");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Retweets");

                    b.Navigation("SavedTweets");

                    b.Navigation("Tweets");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
